import torch
import torchvision

print("PyTorch version:", torch.__version__)
print("Torchvision version:", torchvision.__version__)
print("CUDA is available:", torch.cuda.is_available())
import sys, os
import numpy as np
import torch
import matplotlib.pyplot as plt
import cv2

def show_anns(anns, save_pth = None):
    if len(anns) == 0:
        return
    sorted_anns = sorted(anns, key=(lambda x: x['area']), reverse=True)
    ax = plt.gca()
    ax.set_autoscale_on(False)

    img = np.ones((sorted_anns[0]['segmentation'].shape[0], sorted_anns[0]['segmentation'].shape[1], 4))
    img[:,:,3] = 0
    for ann in sorted_anns:
        m = ann['segmentation']
        color_mask = np.concatenate([np.random.random(3), [0.35]])
        img[m] = color_mask
    ax.imshow(img)
    if save_pth:
        plt.savefig(save_pth)
        # cv2.imwrite(save_pth, img)
print(os.getcwd())
image = cv2.imread('notebooks/images/080007_1-4_4697732_2.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(20,20))
plt.imshow(image)
plt.axis('off')
# plt.show()

from segment_anything import sam_model_registry, SamAutomaticMaskGenerator, SamPredictor

sam_checkpoint = "weight/sam_vit_h_4b8939.pth"
model_type = "vit_h"

ice = "cuda"

sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)
sam.to(device=device)

# mask_generator = SamAutomaticMaskGenerator(sam)
# masks = mask_generator.generate(image)
#
# print(len(masks))
# print(masks[0].keys())
# plt.figure(figsize=(20,20))
# plt.imshow(image)
# save_pth = 'notebooks/result/0_1.jpg'
# show_anns(masks, save_pth)
# plt.axis('off')
# plt.show()
points_per_side = 64
pred_iou_thresh = 0.90
stability_score_thresh = 0.90
crop_n_layers = 1
crop_n_points_downscale_factor = 4
min_mask_region_area = 100
-


mask_generator_2 = SamAutomaticMaskGenerator(
    model=sam,
    points_per_side=points_per_side,
    pred_iou_thresh=pred_iou_thresh,
    stability_score_thresh=stability_score_thresh,
    crop_n_layers=crop_n_layers,
    crop_n_points_downscale_factor=crop_n_points_downscale_factor,
    min_mask_region_area=min_mask_region_area,  # Requires open-cv to run post-processing
)

masks2 = mask_generator_2.generate(image)
len(masks2)
plt.figure(figsize=(20,20))
plt.imshow(image)
save_pth = f'notebooks/result/pit{pred_iou_thresh}_sst{stability_score_thresh}_pps{points_per_side}_cpdf{crop_n_points_downscale_factor}' \
           f'_cl{crop_n_layers}_mmra{min_mask_region_area}.jpg'
show_anns(masks2, save_pth)
plt.axis('off')
# plt.show()

